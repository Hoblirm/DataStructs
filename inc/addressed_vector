#ifndef ADDRESSED_VECTOR_H
#define ADDRESSED_VECTOR_H

template <typename V> 
class addressed_vector {

  public:
  addressed_vector();
  addressed_vector(int capacity);
  ~addressed_vector();

  typedef V* iterator;

  V* insert(int addr, const V& obj);
  V& operator[](int addr);

  V* find(int addr);
  void erase(int addr);
  void clear();

  V* begin();
  V* end();
  static const V mUnset;

  int size();
  int capacity();
  int count(int addr);

  private:
  V* mAry;

  int mCapacity;
  int mMinAddr;
  bool mMinAddrAssigned;

  void grow_ary_lhs(int addr);
  void grow_ary_rhs(int addr); 
};

template <typename V>
const V addressed_vector<V>::mUnset = V();

template <typename V> 
addressed_vector<V>::addressed_vector() {
  mMinAddr = 0;
  mMinAddrAssigned = false;
  mCapacity = 8;
  mAry = new V[mCapacity]();
}

template <typename V> 
addressed_vector<V>::addressed_vector(int capacity) {
  mMinAddr = 0;
  mMinAddrAssigned = false;
  mCapacity = capacity;
  mAry = new V[mCapacity]();
}

template <typename V> 
addressed_vector<V>::~addressed_vector() {
   delete [] mAry;
}

template <typename V> 
void addressed_vector<V>::clear() {
  mCapacity = 8;
  mMinAddrAssigned = false;
  delete [] mAry;
  mAry = new V[mCapacity]();
}

template <typename V>
V* addressed_vector<V>::begin() {
  return mAry;
}

template <typename V>
V* addressed_vector<V>::end() {
  return mAry+mCapacity;
}

template <typename V> 
V* addressed_vector<V>::insert(int addr, const V& obj) {
  if (!mMinAddrAssigned) {
    mMinAddr = addr; 
    mMinAddrAssigned = true;
  }

  if (addr < mMinAddr) {
    grow_ary_lhs(addr);
  } else if ( (addr - mMinAddr) >= mCapacity) {
    grow_ary_rhs(addr);
  }

  mAry[addr - mMinAddr] = obj;
  return &mAry[addr - mMinAddr];
}

template <typename V> 
V& addressed_vector<V>::operator[](int addr) {
  return mAry[addr - mMinAddr];
}

template <typename V> 
V* addressed_vector<V>::find(int addr) {
  if ( (addr < mMinAddr) || ((addr - mMinAddr) >= mCapacity) || (mAry[addr - mMinAddr] == mUnset) ) { 
    return end();
  }
  else {
    return &mAry[addr - mMinAddr];
  }
}

template <typename V> 
void addressed_vector<V>::erase(int addr) {
  if (find(addr) != end()){
    mAry[addr - mMinAddr] = mUnset;
  } 
}

template <typename V> 
int addressed_vector<V>::size() { return mCapacity;}

template <typename V> 
int addressed_vector<V>::capacity() { return mCapacity;}

template <typename V> 
int addressed_vector<V>::count(int addr) {
  if ( (addr < mMinAddr) || ((addr - mMinAddr) >= mCapacity) || (mAry[addr - mMinAddr] == mUnset) ) {
    return 0;
  }
  else {
    return 1;
  }
}

template <typename V> 
void addressed_vector<V>::grow_ary_lhs(int addr) {
  int prevCapacity = mCapacity;
  while (addr< mMinAddr) {
    mMinAddr -= mCapacity;
    mCapacity *= 2;
  }

  V* tmpAry = new V[mCapacity]();
  for (int i=0; i < prevCapacity; i++) {
     tmpAry[i+mCapacity-prevCapacity] = mAry[i];
  }

  delete [] mAry;
  mAry = tmpAry;
}

template <typename V> 
void addressed_vector<V>::grow_ary_rhs(int addr) {
  int prevCapacity = mCapacity;
  while ( (addr - mMinAddr) >= mCapacity ) {
    mCapacity *=2;
  }

  V* tmpAry = new V[mCapacity]();
  for (int i=0; i < prevCapacity; i++) {
     tmpAry[i] = mAry[i];
  }

  delete [] mAry;
  mAry = tmpAry;
}

#endif /* ADDRESSED_VECTOR_H */
