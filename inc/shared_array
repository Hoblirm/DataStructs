#ifndef SHARED_ARRAY_H
#define SHARED_ARRAY_H

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>

#include <pthread.h>

#include <cstddef>
#include <stdexcept>

template <typename T>
class shared_array {

  public:
  shared_array();
  ~shared_array();

  int create(char* filepath, std::size_t length);
  int open(char* filepath, std::size_t length);
  int close();

  int lock();
  int unlock();

  T& operator[](int i);
  const T& operator[](int i) const;
  
  T get(std::size_t i);
  void set(std::size_t i, const T& value);

  private:
  int map_memory(int fd, int length);

  T* mArray;
  std::size_t mArrayLength;
  std::size_t mTotalFileSize;
  pthread_mutex_t* mMutexPtr; 
  
};

template <typename T>
shared_array<T>::shared_array() : mArrayLength(0)  
  {
  }

template <typename T>
shared_array<T>::~shared_array()
  {
    close();
  }

template <typename T>
int shared_array<T>::create(char* filepath, std::size_t length)
  {
    if (mArrayLength)
    {
      perror("Shared array is already opened.");
      return -1;
    }

    // Set the file size.  The shared memory will contain enough
    // room for the array plus a mutex.
    mTotalFileSize = (sizeof(T)*length) + sizeof(pthread_mutex_t);
    
    /* Open a file for writing.
     *  - Creating the file if it doesn't exist.
     *  - Truncating it to 0 size if it already exists. (not really needed)
     *
     * Note: "O_WRONLY" mode is not sufficient when mmaping.
     */
    int fd = ::open(filepath, O_RDWR | O_CREAT | O_TRUNC, (mode_t)0600);
    if (fd == -1)
    {
      perror("Error opening file for writing.");
	  return -2;
    }

    /* Stretch the file size to the size of the (mmapped) array */
    int result = lseek(fd, mTotalFileSize-1, SEEK_SET);
    if (result == -1) 
    {
	  ::close(fd);
      perror("Error calling lseek() to 'strech' the file");
      return -3;
    }

	/* Something needs to be written at the end of the file to
     * have the file actually have the new size.
     * Just writing an empty string at the current file position will do.
     *
     * Note:
     *  - The current position in the file is at the end of the stretched 
     *    file due to the call to lseek().
     *  - An empty string is actually a single '\0' character, so a zero-byte
     *    will be written at the last byte of the file.
     */
    result = write(fd, "", 1);
    if (result != 1) 
    {
	  ::close(fd);
	  perror("Error writing last byte of the file");
	  return -4;
    }
    
    result = map_memory(fd,length);
    if (result < 0)
    {
      return result;
    }
  
    // Initialize the mutex.  We must create a mutex attribute since
    // it must be specified as a shared mutex.  Otherwise it will not
    // be usable by other processes.
    pthread_mutexattr_t attr;
    pthread_mutexattr_init(&attr);
    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);
    if (pthread_mutex_init(mMutexPtr,&attr) != 0)
    {
      perror("Failed initializing mutex.");
      close();
      return -6;
    }

    return 0;
  }

template <typename T>
int shared_array<T>::open(char* filepath, std::size_t length)
  {
    if (mArrayLength)
    {
      perror("Shared array is already opened");
      return -1;
    }

    // Set the file size.  The shared memory will contain enough
    // room for the array plus a mutex.
    mTotalFileSize = (sizeof(T)*length) + sizeof(pthread_mutex_t);

    int fd = ::open(filepath, O_RDWR);
    if (fd == -1) 
    {
      perror("Error opening file");
      return -2;
    }

    return map_memory(fd, length);
  }

template <typename T>
int shared_array<T>::close()
  {
    // File is already closed, or never opened.
    if (mArrayLength == 0)
    {
      return 0;
    }

    // Free the memory.  Since the mutex is at the front of the mapped memory, we
    // can use its pointer to unmap the memory.  This is a bit of a kludge, but it
    // should work so long as the mutex uses the mapped memory's starting address.
    if (munmap((void*)mMutexPtr, mTotalFileSize) == -1) 
    {
	  perror("Error un-mmapping the file");
      return -1;
    }
    else
    {
      // Since the array length is used to determine if the memory is mapped, it must
      // be set back to zero once the memory is unmapped. 
      mArrayLength = 0;
      return 0;
    }
  }

template <typename T>
int shared_array<T>::lock()
  {
    if (mArrayLength && (pthread_mutex_lock(mMutexPtr) == 0))
    {
      return 0;
    }
    else
    {
      perror("Could not lock shared array.");
      return -1;
    }
  }

template <typename T>
int shared_array<T>::unlock()
  {
    if (mArrayLength && (pthread_mutex_unlock(mMutexPtr) == 0))
    {
      return 0;
    }
    else
    {
      perror("Could not unlock shared array.");
      return -1;
    }
  }

template <typename T>
T& shared_array<T>::operator[](int i)
{
  return mArray[i];
}

template <typename T>
const T& shared_array<T>::operator[](int i) const
{
  return mArray[i];
}

template <typename T>
T shared_array<T>::get(std::size_t i)
{
  if (i < mArrayLength)
  {
    pthread_mutex_lock(mMutexPtr);
    T tmp = mArray[i]; 
    pthread_mutex_unlock(mMutexPtr);
    return tmp;
  }
  else
  {
    throw std::out_of_range("Tried to get out of bounds entry from shared array."); 
  }
}

template <typename T>
void shared_array<T>::set(std::size_t i, const T& value)
{
  if (i < mArrayLength)
  {
    pthread_mutex_lock(mMutexPtr);
    mArray[i] = value;
    pthread_mutex_unlock(mMutexPtr);
  }
  else
  {
    throw std::out_of_range("Tried to set out of bounds entry in shared array.");
  }
}


template <typename T>
int shared_array<T>::map_memory(int fd, int length)
  {
    /* Now the file is ready to be mmapped. */
    void* map = mmap(0, mTotalFileSize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (map == MAP_FAILED) {
      ::close(fd);
      perror("Error mapping the file");
      return -5;
    }
    
    // Now that the memory is mapped, set mArrayLength. This variable is not only used to
    // determine the array length, but also checked to be zero to determine if the memory
    // is mapped.
    mArrayLength = length;

    // The physical file can be closed once the memory is mapped. 
    ::close(fd);

    // Assign the mutex and array to the mapped memory.  We want a mutex to be part of
    // the shared memory to provide a means to synchronize between processes.  This
    // will be at the front of the mapped memory.  The actual array of data is offset 
    // by the size of the mutex.
    mMutexPtr = (pthread_mutex_t*)map;
    mArray = (T*)(((char*)map) + sizeof(pthread_mutex_t));

    return 0;
  }

#endif /* SHARED_ARRAY */
