#ifndef ADDRESSED_MAP_H
#define ADDRESSED_MAP_H

#include <addressed_vector>
#define DEFAULT_SIZE 1

template <typename K, typename V> 
class addressed_map_base {
  public:
  addressed_map_base();
  ~addressed_map_base();

  typedef std::pair<K,V>* iterator;

  void clear();

  std::pair<K,V>* begin();
  std::pair<K,V>* end();

  int size();
  int capacity();

  protected:
  addressed_vector<std::pair<K,V>*> mPtrAry;
  std::pair<K,V>* mObjAry;

  int mSize;
  int mObjCapacity;
};

template <typename K, typename V> 
addressed_map_base<K, V>::addressed_map_base() : mSize(0), 
                                       mObjCapacity(DEFAULT_SIZE), 
                                       mPtrAry(DEFAULT_SIZE)
{
   mObjAry = new std::pair<K,V>[DEFAULT_SIZE];
}

template <typename K, typename V> 
addressed_map_base<K, V>::~addressed_map_base() {
   delete [] mObjAry;
}

template <typename K, typename V> 
void addressed_map_base<K, V>::clear() {
  mSize = 0;
  mObjCapacity = 8;
  mPtrAry.clear();
  delete [] mObjAry;
  mObjAry = new std::pair<K,V>[mObjCapacity];
}

template <typename K, typename V>
std::pair<K,V>* addressed_map_base<K, V>::begin() {
  return mObjAry;
}

template <typename K, typename V>
std::pair<K,V>* addressed_map_base<K, V>::end() {
  return mObjAry+mSize;
}

template <typename K, typename V> 
int addressed_map_base<K, V>::size() { return mSize;}

template <typename K, typename V> 
int addressed_map_base<K, V>::capacity() { return mPtrAry.capacity();}

template <class K, typename V>
class addressed_map : public addressed_map_base<K,V> {
  public:
  V& operator[](const K& key);
  std::pair<K,V>* insert(const std::pair<K,V>& obj);
  std::pair<K,V>* find(const K& key);
  void erase(const K& key);
  int count(const K& key);
 
  private:
  typedef addressed_map_base<K,V> Base;
  void resize_obj_ary(int size);
  void shift_obj_ary(std::pair<K,V>* it);
};

template <class K, typename V> 
std::pair<K,V>* addressed_map<K, V>::insert(const std::pair<K,V>& obj) {
  if (Base::mSize >= Base::mObjCapacity) {
    resize_obj_ary(Base::mObjCapacity*2);
  }

  int addr = obj.first.toInt();
  Base::mObjAry[Base::mSize] = obj;
  Base::mPtrAry.insert(addr, &Base::mObjAry[Base::mSize]);
  ++(Base::mSize);
  return Base::mPtrAry[addr];
}

template <class K, typename V> 
std::pair<K,V>* addressed_map<K, V>::find(const K& key) {
  std::pair<K,V>** it = Base::mPtrAry.find(key.toInt());
  if (it != Base::mPtrAry.end()) {
    return *it;
  } else {
    return Base::end();
  }
}

template <class K, typename V> 
void addressed_map<K, V>::erase(const K& key) {
  std::pair<K,V>* it = find(key);

  if (it != Base::end()){
    shift_obj_ary(it);
    Base::mPtrAry.erase(key.toInt());
    --Base::mSize;
  } 
}

template <class K, typename V> 
int addressed_map<K, V>::count(const K& key) {
  return Base::mPtrAry.count(key.toInt());
}

template <class K, typename V> 
V& addressed_map<K, V>::operator[](const K& key) {
  std::pair<K,V>* it = find(key);
  if (it != Base::end()) {
    return it->second;
  }
  else {
    return insert(std::pair<K,V>(key,V()))->second;
  }
}

template <class K, typename V> 
void addressed_map<K, V>::resize_obj_ary(int size) {
  int prevObjCapacity = Base::mObjCapacity;
  Base::mObjCapacity = size;

  int minCapacity = Base::mObjCapacity;
  if (prevObjCapacity < minCapacity) {
     minCapacity = prevObjCapacity;
  }

  std::pair<K,V>* tmpObjAry = new std::pair<K,V>[Base::mObjCapacity];
  for (int i=0; i < minCapacity; i++) {
     tmpObjAry[i] = Base::mObjAry[i];
     Base::mPtrAry[tmpObjAry[i].first.toInt()] = &tmpObjAry[i];
  }

  delete [] Base::mObjAry;
  Base::mObjAry = tmpObjAry;
}

template <class K, typename V>
void addressed_map<K, V>::shift_obj_ary(std::pair<K,V>* it) {
  std::pair<K,V>* last = Base::end() - 1;
  while (it != last) {
    *it = *(it+1);
    Base::mPtrAry[it->first.toInt()] = it;
    ++it;
  }
}

template <typename V>
class addressed_map<int,V> : public addressed_map_base<int,V> {
  public:
  V& operator[](const int& addr);
  std::pair<int,V>* insert(const std::pair<int,V>& obj);
  std::pair<int,V>* find(const int& addr);
  void erase(const int& addr);
  int count(const int& addr);

  private:
  typedef addressed_map_base<int,V> Base;
  void resize_obj_ary(int size);
  void shift_obj_ary(std::pair<int,V>* it);
};

template <typename V> 
std::pair<int,V>* addressed_map<int, V>::insert(const std::pair<int,V>& obj) {
  if (Base::mSize >= Base::mObjCapacity) {
    resize_obj_ary(Base::mObjCapacity*2);
  }

  int addr = obj.first;
  Base::mObjAry[Base::mSize] = obj;
  Base::mPtrAry.insert(addr, &Base::mObjAry[Base::mSize]);
  ++(Base::mSize);
  return Base::mPtrAry[addr];
}

template <typename V> 
std::pair<int,V>* addressed_map<int, V>::find(const int& addr) {
  std::pair<int,V>** it = Base::mPtrAry.find(addr);
  if (it != Base::mPtrAry.end()) {
    return *it;
  } else {
    return Base::end();
  }
}

template <typename V> 
void addressed_map<int, V>::erase(const int& addr) {
  std::pair<int,V>* it = find(addr);

  if (it != Base::end()){
    shift_obj_ary(it);
    Base::mPtrAry.erase(addr);
    --Base::mSize;
  } 
}

template <typename V> 
int addressed_map<int, V>::count(const int& addr) {
  return Base::mPtrAry.count(addr);
}

template <typename V> 
V& addressed_map<int, V>::operator[](const int& addr) {
  std::pair<int,V>* it = find(addr);
  if (it != Base::end()) {
    return it->second;
  }
  else {
    return insert(std::pair<int,V>(addr,V()))->second;
  }
}

template <typename V> 
void addressed_map<int, V>::resize_obj_ary(int size) {
  int prevObjCapacity = Base::mObjCapacity;
  Base::mObjCapacity = size;

  int minCapacity = Base::mObjCapacity;
  if (prevObjCapacity < Base::mObjCapacity) {
     minCapacity = prevObjCapacity;
  }

  std::pair<int,V>* tmpObjAry = new std::pair<int,V>[Base::mObjCapacity];
  for (int i=0; i < minCapacity; i++) {
     tmpObjAry[i] = Base::mObjAry[i];
     Base::mPtrAry[tmpObjAry[i].first] = &tmpObjAry[i];
  }

  delete [] Base::mObjAry;
  Base::mObjAry = tmpObjAry;
}

template <typename V>
void addressed_map<int, V>::shift_obj_ary(std::pair<int,V>* it) {
  std::pair<int,V>* last = Base::end() - 1;
  while (it != last) {
    *it = *(it+1);
    Base::mPtrAry[it->first] = it;
    ++it;
  }
}

#endif /* ADDRESSED_MAP_H */
